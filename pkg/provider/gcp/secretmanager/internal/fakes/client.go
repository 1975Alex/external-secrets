// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	secretmanagerb "cloud.google.com/go/secretmanager/apiv1"
	"github.com/external-secrets/external-secrets/pkg/provider/gcp/secretmanager"
	gax "github.com/googleapis/gax-go/v2"
	secretmanagera "google.golang.org/genproto/googleapis/cloud/secretmanager/v1"
)

type GoogleSecretManagerClient struct {
	AccessSecretVersionStub        func(context.Context, *secretmanagera.AccessSecretVersionRequest, ...gax.CallOption) (*secretmanagera.AccessSecretVersionResponse, error)
	accessSecretVersionMutex       sync.RWMutex
	accessSecretVersionArgsForCall []struct {
		arg1 context.Context
		arg2 *secretmanagera.AccessSecretVersionRequest
		arg3 []gax.CallOption
	}
	accessSecretVersionReturns struct {
		result1 *secretmanagera.AccessSecretVersionResponse
		result2 error
	}
	accessSecretVersionReturnsOnCall map[int]struct {
		result1 *secretmanagera.AccessSecretVersionResponse
		result2 error
	}
	AddSecretVersionStub        func(context.Context, *secretmanagera.AddSecretVersionRequest, ...gax.CallOption) (*secretmanagera.SecretVersion, error)
	addSecretVersionMutex       sync.RWMutex
	addSecretVersionArgsForCall []struct {
		arg1 context.Context
		arg2 *secretmanagera.AddSecretVersionRequest
		arg3 []gax.CallOption
	}
	addSecretVersionReturns struct {
		result1 *secretmanagera.SecretVersion
		result2 error
	}
	addSecretVersionReturnsOnCall map[int]struct {
		result1 *secretmanagera.SecretVersion
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CreateSecretStub        func(context.Context, *secretmanagera.CreateSecretRequest, ...gax.CallOption) (*secretmanagera.Secret, error)
	createSecretMutex       sync.RWMutex
	createSecretArgsForCall []struct {
		arg1 context.Context
		arg2 *secretmanagera.CreateSecretRequest
		arg3 []gax.CallOption
	}
	createSecretReturns struct {
		result1 *secretmanagera.Secret
		result2 error
	}
	createSecretReturnsOnCall map[int]struct {
		result1 *secretmanagera.Secret
		result2 error
	}
	GetSecretStub        func(context.Context, *secretmanagera.GetSecretRequest, ...gax.CallOption) (*secretmanagera.Secret, error)
	getSecretMutex       sync.RWMutex
	getSecretArgsForCall []struct {
		arg1 context.Context
		arg2 *secretmanagera.GetSecretRequest
		arg3 []gax.CallOption
	}
	getSecretReturns struct {
		result1 *secretmanagera.Secret
		result2 error
	}
	getSecretReturnsOnCall map[int]struct {
		result1 *secretmanagera.Secret
		result2 error
	}
	ListSecretsStub        func(context.Context, *secretmanagera.ListSecretsRequest, ...gax.CallOption) *secretmanagerb.SecretIterator
	listSecretsMutex       sync.RWMutex
	listSecretsArgsForCall []struct {
		arg1 context.Context
		arg2 *secretmanagera.ListSecretsRequest
		arg3 []gax.CallOption
	}
	listSecretsReturns struct {
		result1 *secretmanagerb.SecretIterator
	}
	listSecretsReturnsOnCall map[int]struct {
		result1 *secretmanagerb.SecretIterator
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GoogleSecretManagerClient) AccessSecretVersion(arg1 context.Context, arg2 *secretmanagera.AccessSecretVersionRequest, arg3 ...gax.CallOption) (*secretmanagera.AccessSecretVersionResponse, error) {
	fake.accessSecretVersionMutex.Lock()
	ret, specificReturn := fake.accessSecretVersionReturnsOnCall[len(fake.accessSecretVersionArgsForCall)]
	fake.accessSecretVersionArgsForCall = append(fake.accessSecretVersionArgsForCall, struct {
		arg1 context.Context
		arg2 *secretmanagera.AccessSecretVersionRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.AccessSecretVersionStub
	fakeReturns := fake.accessSecretVersionReturns
	fake.recordInvocation("AccessSecretVersion", []interface{}{arg1, arg2, arg3})
	fake.accessSecretVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *GoogleSecretManagerClient) AccessSecretVersionCallCount() int {
	fake.accessSecretVersionMutex.RLock()
	defer fake.accessSecretVersionMutex.RUnlock()
	return len(fake.accessSecretVersionArgsForCall)
}

func (fake *GoogleSecretManagerClient) AccessSecretVersionCalls(stub func(context.Context, *secretmanagera.AccessSecretVersionRequest, ...gax.CallOption) (*secretmanagera.AccessSecretVersionResponse, error)) {
	fake.accessSecretVersionMutex.Lock()
	defer fake.accessSecretVersionMutex.Unlock()
	fake.AccessSecretVersionStub = stub
}

func (fake *GoogleSecretManagerClient) AccessSecretVersionArgsForCall(i int) (context.Context, *secretmanagera.AccessSecretVersionRequest, []gax.CallOption) {
	fake.accessSecretVersionMutex.RLock()
	defer fake.accessSecretVersionMutex.RUnlock()
	argsForCall := fake.accessSecretVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *GoogleSecretManagerClient) AccessSecretVersionReturns(result1 *secretmanagera.AccessSecretVersionResponse, result2 error) {
	fake.accessSecretVersionMutex.Lock()
	defer fake.accessSecretVersionMutex.Unlock()
	fake.AccessSecretVersionStub = nil
	fake.accessSecretVersionReturns = struct {
		result1 *secretmanagera.AccessSecretVersionResponse
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) AccessSecretVersionReturnsOnCall(i int, result1 *secretmanagera.AccessSecretVersionResponse, result2 error) {
	fake.accessSecretVersionMutex.Lock()
	defer fake.accessSecretVersionMutex.Unlock()
	fake.AccessSecretVersionStub = nil
	if fake.accessSecretVersionReturnsOnCall == nil {
		fake.accessSecretVersionReturnsOnCall = make(map[int]struct {
			result1 *secretmanagera.AccessSecretVersionResponse
			result2 error
		})
	}
	fake.accessSecretVersionReturnsOnCall[i] = struct {
		result1 *secretmanagera.AccessSecretVersionResponse
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) AddSecretVersion(arg1 context.Context, arg2 *secretmanagera.AddSecretVersionRequest, arg3 ...gax.CallOption) (*secretmanagera.SecretVersion, error) {
	fake.addSecretVersionMutex.Lock()
	ret, specificReturn := fake.addSecretVersionReturnsOnCall[len(fake.addSecretVersionArgsForCall)]
	fake.addSecretVersionArgsForCall = append(fake.addSecretVersionArgsForCall, struct {
		arg1 context.Context
		arg2 *secretmanagera.AddSecretVersionRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.AddSecretVersionStub
	fakeReturns := fake.addSecretVersionReturns
	fake.recordInvocation("AddSecretVersion", []interface{}{arg1, arg2, arg3})
	fake.addSecretVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *GoogleSecretManagerClient) AddSecretVersionCallCount() int {
	fake.addSecretVersionMutex.RLock()
	defer fake.addSecretVersionMutex.RUnlock()
	return len(fake.addSecretVersionArgsForCall)
}

func (fake *GoogleSecretManagerClient) AddSecretVersionCalls(stub func(context.Context, *secretmanagera.AddSecretVersionRequest, ...gax.CallOption) (*secretmanagera.SecretVersion, error)) {
	fake.addSecretVersionMutex.Lock()
	defer fake.addSecretVersionMutex.Unlock()
	fake.AddSecretVersionStub = stub
}

func (fake *GoogleSecretManagerClient) AddSecretVersionArgsForCall(i int) (context.Context, *secretmanagera.AddSecretVersionRequest, []gax.CallOption) {
	fake.addSecretVersionMutex.RLock()
	defer fake.addSecretVersionMutex.RUnlock()
	argsForCall := fake.addSecretVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *GoogleSecretManagerClient) AddSecretVersionReturns(result1 *secretmanagera.SecretVersion, result2 error) {
	fake.addSecretVersionMutex.Lock()
	defer fake.addSecretVersionMutex.Unlock()
	fake.AddSecretVersionStub = nil
	fake.addSecretVersionReturns = struct {
		result1 *secretmanagera.SecretVersion
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) AddSecretVersionReturnsOnCall(i int, result1 *secretmanagera.SecretVersion, result2 error) {
	fake.addSecretVersionMutex.Lock()
	defer fake.addSecretVersionMutex.Unlock()
	fake.AddSecretVersionStub = nil
	if fake.addSecretVersionReturnsOnCall == nil {
		fake.addSecretVersionReturnsOnCall = make(map[int]struct {
			result1 *secretmanagera.SecretVersion
			result2 error
		})
	}
	fake.addSecretVersionReturnsOnCall[i] = struct {
		result1 *secretmanagera.SecretVersion
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *GoogleSecretManagerClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *GoogleSecretManagerClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *GoogleSecretManagerClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *GoogleSecretManagerClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *GoogleSecretManagerClient) CreateSecret(arg1 context.Context, arg2 *secretmanagera.CreateSecretRequest, arg3 ...gax.CallOption) (*secretmanagera.Secret, error) {
	fake.createSecretMutex.Lock()
	ret, specificReturn := fake.createSecretReturnsOnCall[len(fake.createSecretArgsForCall)]
	fake.createSecretArgsForCall = append(fake.createSecretArgsForCall, struct {
		arg1 context.Context
		arg2 *secretmanagera.CreateSecretRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.CreateSecretStub
	fakeReturns := fake.createSecretReturns
	fake.recordInvocation("CreateSecret", []interface{}{arg1, arg2, arg3})
	fake.createSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *GoogleSecretManagerClient) CreateSecretCallCount() int {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return len(fake.createSecretArgsForCall)
}

func (fake *GoogleSecretManagerClient) CreateSecretCalls(stub func(context.Context, *secretmanagera.CreateSecretRequest, ...gax.CallOption) (*secretmanagera.Secret, error)) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = stub
}

func (fake *GoogleSecretManagerClient) CreateSecretArgsForCall(i int) (context.Context, *secretmanagera.CreateSecretRequest, []gax.CallOption) {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	argsForCall := fake.createSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *GoogleSecretManagerClient) CreateSecretReturns(result1 *secretmanagera.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	fake.createSecretReturns = struct {
		result1 *secretmanagera.Secret
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) CreateSecretReturnsOnCall(i int, result1 *secretmanagera.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	if fake.createSecretReturnsOnCall == nil {
		fake.createSecretReturnsOnCall = make(map[int]struct {
			result1 *secretmanagera.Secret
			result2 error
		})
	}
	fake.createSecretReturnsOnCall[i] = struct {
		result1 *secretmanagera.Secret
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) GetSecret(arg1 context.Context, arg2 *secretmanagera.GetSecretRequest, arg3 ...gax.CallOption) (*secretmanagera.Secret, error) {
	fake.getSecretMutex.Lock()
	ret, specificReturn := fake.getSecretReturnsOnCall[len(fake.getSecretArgsForCall)]
	fake.getSecretArgsForCall = append(fake.getSecretArgsForCall, struct {
		arg1 context.Context
		arg2 *secretmanagera.GetSecretRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetSecretStub
	fakeReturns := fake.getSecretReturns
	fake.recordInvocation("GetSecret", []interface{}{arg1, arg2, arg3})
	fake.getSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *GoogleSecretManagerClient) GetSecretCallCount() int {
	fake.getSecretMutex.RLock()
	defer fake.getSecretMutex.RUnlock()
	return len(fake.getSecretArgsForCall)
}

func (fake *GoogleSecretManagerClient) GetSecretCalls(stub func(context.Context, *secretmanagera.GetSecretRequest, ...gax.CallOption) (*secretmanagera.Secret, error)) {
	fake.getSecretMutex.Lock()
	defer fake.getSecretMutex.Unlock()
	fake.GetSecretStub = stub
}

func (fake *GoogleSecretManagerClient) GetSecretArgsForCall(i int) (context.Context, *secretmanagera.GetSecretRequest, []gax.CallOption) {
	fake.getSecretMutex.RLock()
	defer fake.getSecretMutex.RUnlock()
	argsForCall := fake.getSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *GoogleSecretManagerClient) GetSecretReturns(result1 *secretmanagera.Secret, result2 error) {
	fake.getSecretMutex.Lock()
	defer fake.getSecretMutex.Unlock()
	fake.GetSecretStub = nil
	fake.getSecretReturns = struct {
		result1 *secretmanagera.Secret
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) GetSecretReturnsOnCall(i int, result1 *secretmanagera.Secret, result2 error) {
	fake.getSecretMutex.Lock()
	defer fake.getSecretMutex.Unlock()
	fake.GetSecretStub = nil
	if fake.getSecretReturnsOnCall == nil {
		fake.getSecretReturnsOnCall = make(map[int]struct {
			result1 *secretmanagera.Secret
			result2 error
		})
	}
	fake.getSecretReturnsOnCall[i] = struct {
		result1 *secretmanagera.Secret
		result2 error
	}{result1, result2}
}

func (fake *GoogleSecretManagerClient) ListSecrets(arg1 context.Context, arg2 *secretmanagera.ListSecretsRequest, arg3 ...gax.CallOption) *secretmanagerb.SecretIterator {
	fake.listSecretsMutex.Lock()
	ret, specificReturn := fake.listSecretsReturnsOnCall[len(fake.listSecretsArgsForCall)]
	fake.listSecretsArgsForCall = append(fake.listSecretsArgsForCall, struct {
		arg1 context.Context
		arg2 *secretmanagera.ListSecretsRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.ListSecretsStub
	fakeReturns := fake.listSecretsReturns
	fake.recordInvocation("ListSecrets", []interface{}{arg1, arg2, arg3})
	fake.listSecretsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *GoogleSecretManagerClient) ListSecretsCallCount() int {
	fake.listSecretsMutex.RLock()
	defer fake.listSecretsMutex.RUnlock()
	return len(fake.listSecretsArgsForCall)
}

func (fake *GoogleSecretManagerClient) ListSecretsCalls(stub func(context.Context, *secretmanagera.ListSecretsRequest, ...gax.CallOption) *secretmanagerb.SecretIterator) {
	fake.listSecretsMutex.Lock()
	defer fake.listSecretsMutex.Unlock()
	fake.ListSecretsStub = stub
}

func (fake *GoogleSecretManagerClient) ListSecretsArgsForCall(i int) (context.Context, *secretmanagera.ListSecretsRequest, []gax.CallOption) {
	fake.listSecretsMutex.RLock()
	defer fake.listSecretsMutex.RUnlock()
	argsForCall := fake.listSecretsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *GoogleSecretManagerClient) ListSecretsReturns(result1 *secretmanagerb.SecretIterator) {
	fake.listSecretsMutex.Lock()
	defer fake.listSecretsMutex.Unlock()
	fake.ListSecretsStub = nil
	fake.listSecretsReturns = struct {
		result1 *secretmanagerb.SecretIterator
	}{result1}
}

func (fake *GoogleSecretManagerClient) ListSecretsReturnsOnCall(i int, result1 *secretmanagerb.SecretIterator) {
	fake.listSecretsMutex.Lock()
	defer fake.listSecretsMutex.Unlock()
	fake.ListSecretsStub = nil
	if fake.listSecretsReturnsOnCall == nil {
		fake.listSecretsReturnsOnCall = make(map[int]struct {
			result1 *secretmanagerb.SecretIterator
		})
	}
	fake.listSecretsReturnsOnCall[i] = struct {
		result1 *secretmanagerb.SecretIterator
	}{result1}
}

func (fake *GoogleSecretManagerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.accessSecretVersionMutex.RLock()
	defer fake.accessSecretVersionMutex.RUnlock()
	fake.addSecretVersionMutex.RLock()
	defer fake.addSecretVersionMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	fake.getSecretMutex.RLock()
	defer fake.getSecretMutex.RUnlock()
	fake.listSecretsMutex.RLock()
	defer fake.listSecretsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *GoogleSecretManagerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ secretmanager.GoogleSecretManagerClient = new(GoogleSecretManagerClient)
