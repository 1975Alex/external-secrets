// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/plugin/grpc/provider.proto

package plugin_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretsClientClient is the client API for SecretsClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretsClientClient interface {
	// GetSecret returns a single secret from the provider
	// if GetSecret returns an error with type NoSecretError
	// then the secret entry will be deleted depending on the deletionPolicy.
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretReply, error)
	// PushSecret will write a single secret into the provider
	PushSecret(ctx context.Context, in *PushSecretRequest, opts ...grpc.CallOption) (*PushSecretReply, error)
	// DeleteSecret will delete the secret from a provider
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretReply, error)
	// GetSecretMap returns multiple k/v pairs from the provider
	GetSecretMap(ctx context.Context, in *GetSecretMapRequest, opts ...grpc.CallOption) (*GetSecretMapReply, error)
	// GetAllSecrets returns multiple k/v pairs from the provider
	GetAllSecrets(ctx context.Context, in *GetAllSecretsRequest, opts ...grpc.CallOption) (*GetAllSecretsReply, error)
}

type secretsClientClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsClientClient(cc grpc.ClientConnInterface) SecretsClientClient {
	return &secretsClientClient{cc}
}

func (c *secretsClientClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretReply, error) {
	out := new(GetSecretReply)
	err := c.cc.Invoke(ctx, "/plugin.SecretsClient/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClientClient) PushSecret(ctx context.Context, in *PushSecretRequest, opts ...grpc.CallOption) (*PushSecretReply, error) {
	out := new(PushSecretReply)
	err := c.cc.Invoke(ctx, "/plugin.SecretsClient/PushSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClientClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretReply, error) {
	out := new(DeleteSecretReply)
	err := c.cc.Invoke(ctx, "/plugin.SecretsClient/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClientClient) GetSecretMap(ctx context.Context, in *GetSecretMapRequest, opts ...grpc.CallOption) (*GetSecretMapReply, error) {
	out := new(GetSecretMapReply)
	err := c.cc.Invoke(ctx, "/plugin.SecretsClient/GetSecretMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClientClient) GetAllSecrets(ctx context.Context, in *GetAllSecretsRequest, opts ...grpc.CallOption) (*GetAllSecretsReply, error) {
	out := new(GetAllSecretsReply)
	err := c.cc.Invoke(ctx, "/plugin.SecretsClient/GetAllSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsClientServer is the server API for SecretsClient service.
// All implementations must embed UnimplementedSecretsClientServer
// for forward compatibility
type SecretsClientServer interface {
	// GetSecret returns a single secret from the provider
	// if GetSecret returns an error with type NoSecretError
	// then the secret entry will be deleted depending on the deletionPolicy.
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretReply, error)
	// PushSecret will write a single secret into the provider
	PushSecret(context.Context, *PushSecretRequest) (*PushSecretReply, error)
	// DeleteSecret will delete the secret from a provider
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretReply, error)
	// GetSecretMap returns multiple k/v pairs from the provider
	GetSecretMap(context.Context, *GetSecretMapRequest) (*GetSecretMapReply, error)
	// GetAllSecrets returns multiple k/v pairs from the provider
	GetAllSecrets(context.Context, *GetAllSecretsRequest) (*GetAllSecretsReply, error)
	mustEmbedUnimplementedSecretsClientServer()
}

// UnimplementedSecretsClientServer must be embedded to have forward compatible implementations.
type UnimplementedSecretsClientServer struct {
}

func (UnimplementedSecretsClientServer) GetSecret(context.Context, *GetSecretRequest) (*GetSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedSecretsClientServer) PushSecret(context.Context, *PushSecretRequest) (*PushSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSecret not implemented")
}
func (UnimplementedSecretsClientServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretsClientServer) GetSecretMap(context.Context, *GetSecretMapRequest) (*GetSecretMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretMap not implemented")
}
func (UnimplementedSecretsClientServer) GetAllSecrets(context.Context, *GetAllSecretsRequest) (*GetAllSecretsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSecrets not implemented")
}
func (UnimplementedSecretsClientServer) mustEmbedUnimplementedSecretsClientServer() {}

// UnsafeSecretsClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsClientServer will
// result in compilation errors.
type UnsafeSecretsClientServer interface {
	mustEmbedUnimplementedSecretsClientServer()
}

func RegisterSecretsClientServer(s grpc.ServiceRegistrar, srv SecretsClientServer) {
	s.RegisterService(&SecretsClient_ServiceDesc, srv)
}

func _SecretsClient_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsClientServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.SecretsClient/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsClientServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsClient_PushSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsClientServer).PushSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.SecretsClient/PushSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsClientServer).PushSecret(ctx, req.(*PushSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsClient_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsClientServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.SecretsClient/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsClientServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsClient_GetSecretMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsClientServer).GetSecretMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.SecretsClient/GetSecretMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsClientServer).GetSecretMap(ctx, req.(*GetSecretMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsClient_GetAllSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsClientServer).GetAllSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugin.SecretsClient/GetAllSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsClientServer).GetAllSecrets(ctx, req.(*GetAllSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretsClient_ServiceDesc is the grpc.ServiceDesc for SecretsClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.SecretsClient",
	HandlerType: (*SecretsClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _SecretsClient_GetSecret_Handler,
		},
		{
			MethodName: "PushSecret",
			Handler:    _SecretsClient_PushSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretsClient_DeleteSecret_Handler,
		},
		{
			MethodName: "GetSecretMap",
			Handler:    _SecretsClient_GetSecretMap_Handler,
		},
		{
			MethodName: "GetAllSecrets",
			Handler:    _SecretsClient_GetAllSecrets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/plugin/grpc/provider.proto",
}
